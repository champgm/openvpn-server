AWSTemplateFormatVersion: '2010-09-09'
Description: 'OpenVPN Server Setup using CloudFormation'

Parameters:
  InstanceType:
    Type: String
    Description: EC2 instance type
    AllowedValues: [t2.micro, t3.micro, t3a.micro, t2.small, t3.small, t3a.small]
    Default: t3a.micro

  KeyPairName:
    Description: Name of an existing EC2 KeyPair to SSH into the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: vpn-west-2

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id'

Resources:
  OpenVPNServer:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - install_openvpn
            - create_ovpn_script
        install_openvpn:
          packages:
            apt:
              wget: []
              openvpn: []
              easy-rsa: []
          commands:
            01_download_openvpn_script:
              command: "wget https://git.io/vpn -O /tmp/openvpn-install.sh && chmod +x /tmp/openvpn-install.sh"
            02_run_openvpn_installer:
              command: "/tmp/openvpn-install.sh --auto"
        create_ovpn_script:
          files:
            "/usr/local/bin/create-ovpn-client.sh":
              content: |
                #!/bin/bash
                new_client () {
                    {
                    cat /etc/openvpn/server/client-common.txt
                    echo "<ca>"
                    cat /etc/openvpn/server/easy-rsa/pki/ca.crt
                    echo "</ca>"
                    echo "<cert>"
                    sed -ne '/BEGIN CERTIFICATE/,$ p' /etc/openvpn/server/easy-rsa/pki/issued/"$client_name".crt
                    echo "</cert>"
                    echo "<key>"
                    cat /etc/openvpn/server/easy-rsa/pki/private/"$client_name".key
                    echo "</key>"
                    echo "<tls-crypt>"
                    sed -ne '/BEGIN OpenVPN Static key/,$ p' /etc/openvpn/server/tc.key
                    echo "</tls-crypt>"
                    mssfix 1350
                    } > /home/ubuntu/$client_name.ovpn
                }
                
                # Check if client name is provided
                if [ -z "$1" ]; then
                    echo "Usage: $0 <client_name>"
                    exit 1
                fi
                
                client_name="$1"
                client_name=$(sed 's/[^0-9a-zA-Z_-]/_/g' <<< "$client_name")
                
                # Check if client already exists
                if [ -e "/etc/openvpn/server/easy-rsa/pki/issued/$client_name.crt" ]; then
                    echo "Client $client_name already exists!"
                    exit 1
                fi
                
                cd /etc/openvpn/server/easy-rsa/
                ./easyrsa --batch --days=3650 build-client-full "$client_name" nopass
                
                # Generate the OVPN file
                new_client
                echo "Client $client_name added. Configuration is available at ~/$client_name.ovpn"
              mode: '000755'
      AWS::CloudFormation::Authentication:
        S3Auth:
          type: "S3"
          buckets: ["your-bucket-name"]

    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      ImageId: !Ref LatestAmiId
      SecurityGroupIds:
        - !Ref OpenVPNSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install -y python3-pip python3-setuptools heat-cfntools
            pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource OpenVPNServer --region ${AWS::Region}
            /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource OpenVPNServer --region ${AWS::Region}
            # After OpenVPN installation, create a client config (this runs on startup)
            /usr/local/bin/create-ovpn-client.sh macbook1
            /usr/local/bin/create-ovpn-client.sh macbook2 
            /usr/local/bin/create-ovpn-client.sh macbook3
            /usr/local/bin/create-ovpn-client.sh phone1
            /usr/local/bin/create-ovpn-client.sh phone2 
            /usr/local/bin/create-ovpn-client.sh phone3
  OpenVPNSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable VPN and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 1194
          ToPort: 1194
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

Outputs:
  InstancePublicIP:
    Description: Public IP address of the OpenVPN server
    Value: !GetAtt OpenVPNServer.PublicIp
  InstanceID:
    Description: Instance ID of the OpenVPN server
    Value: !Ref OpenVPNServer
  ConnectionInstructions:
    Description: How to connect to the server
    Value: !Sub |
      SSH to your instance using:
      ssh -i ~\.ssh\${KeyPairName}.pem ubuntu@${OpenVPNServer.PublicIp}
      SCP the files to your device:
      scp -i ~\.ssh\${KeyPairName}.pem ubuntu@${OpenVPNServer.PublicIp}:~/macbook1.ovpn .
      scp -i ~\.ssh\${KeyPairName}.pem ubuntu@${OpenVPNServer.PublicIp}:~/macbook2.ovpn .
      scp -i ~\.ssh\${KeyPairName}.pem ubuntu@${OpenVPNServer.PublicIp}:~/macbook3.ovpn .
      scp -i ~\.ssh\${KeyPairName}.pem ubuntu@${OpenVPNServer.PublicIp}:~/phone1.ovpn .
      scp -i ~\.ssh\${KeyPairName}.pem ubuntu@${OpenVPNServer.PublicIp}:~/phone2.ovpn .
      scp -i ~\.ssh\${KeyPairName}.pem ubuntu@${OpenVPNServer.PublicIp}:~/phone3.ovpn .

      
